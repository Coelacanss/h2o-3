package ai.h2o.cascade.stdlib;

import ai.h2o.cascade.core.Function;
import ai.h2o.cascade.core.Val;

import static ai.h2o.cascade.core.Val.Type.*;


/**
 * Base class for all functions in the Cascade Standard Library.
 */
public abstract class StdlibFunction extends Function {

  /**
   * Stub method: actual implementation will be generated by the weaver
   * in {@link StandardLibrary}.
   */
  @Override
  public Val apply0(Val[] args) {
    throw new RuntimeException("Missing generated method apply0(Val[]) for " + getClass().getName() + ".\n" +
                               "Did you forget to load StandardLibrary class?");
  }



  //--------------------------------------------------------------------------------------------------------------------
  // Helpers for apply0()
  //--------------------------------------------------------------------------------------------------------------------

  /**
   * Perform verification that the number of arguments supplied to a function
   * is within the expected bounds, or throw an exception otherwise.
   *
   * @param actualN Number of arguments passed to a function
   * @param expectedMin Smallest acceptable count of arguments
   * @param expectedMax Largest acceptable count of arguments. It is often the
   *                    case that {@code expectedMin == expectedMax}.
   */
  @SuppressWarnings("unused")  // Used in the apply0() method generated by the StandardLibrary
  protected final void argumentsCountCheck(int actualN, int expectedMin, int expectedMax) {
    if (expectedMin == expectedMax) {
      if (actualN != expectedMin) {
        throw new TypeError(-1, "Wrong number of arguments: expected " + expectedMin + ", received " + actualN);
      }
    } else {
      if (actualN < expectedMin) {
        throw new TypeError(-1, "Too few arguments: expected at least " + expectedMin + ", received " + actualN);
      }
      if (actualN > expectedMax) {
        throw new TypeError(-1, "Too many arguments: expected at most " + expectedMax + ", received " + actualN);
      }
    }
  }


  /**
   * Verify that argument {@code i} within the {@code args} has the expected
   * type, or throw an error otherwise.
   *
   * @param i Index of the element to test.
   * @param arg The value being tested.
   * @param expType Expected type for element {@code arg}.
   */
  @SuppressWarnings("unused")  // Used in the apply0() method generated by the StandardLibrary
  protected final void checkArg(int i, Val arg, Val.Type expType) {
    Val.Type actualType = arg.type();
    if (actualType == expType || actualType == NULL ||
        actualType == NUMS && (expType == INT && arg.isInt() ||
                               expType == BOOL && arg.isBool()))
      return;
    throw new TypeError(i, "Expected argument of type " + expType + " but instead got " + actualType);
  }
}
